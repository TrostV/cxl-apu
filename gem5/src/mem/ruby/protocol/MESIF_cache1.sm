//Backend.SLICC.ModularSLICC.cache.GenCacheHeader
machine(MachineType:L1Cache, "Cache controller")
: Sequencer *sequencer;
  CacheMemory *cache;
  bool send_evictions;
  int l2_id;

  // The following latencies should be exposed as command-line parameters in a future update
  Cycles responseLatency := 1;
  Cycles recycleLatency := 10;

  // Required networks
  MessageBuffer *mandatoryQueue;

  // Dynamic networks
  MessageBuffer *fwdTo,    network="To",   virtual_network="12", vnet_type="fwd";
  MessageBuffer *fwdFrom,  network="From", virtual_network="12", vnet_type="fwd";
  MessageBuffer *respTo,   network="To",   virtual_network="13", vnet_type="resp";
  MessageBuffer *respFrom, network="From", virtual_network="13", vnet_type="resp";
  MessageBuffer *reqTo,    network="To",   virtual_network="14", vnet_type="req";
  MessageBuffer *reqFrom,  network="From", virtual_network="14", vnet_type="req";

{
  //Backend.SLICC.ModularSLICC.cache.GenCacheStateDecl
  state_declaration(State, desc="L1Cache states", default="L1Cache_State_I") {
    E, AccessPermission:Read_Write, desc="... TODO ...";
    E_evict, AccessPermission:Read_Only, desc="... TODO ...";
    F, AccessPermission:Read_Only, desc="... TODO ...";
    F_evict, AccessPermission:Read_Only, desc="... TODO ...";
    F_store, AccessPermission:Read_Only, desc="... TODO ...";
    F_store_GetF_Ack_AD, AccessPermission:Read_Only, desc="... TODO ...";
    F_store_GetM_Ack_AD, AccessPermission:Read_Only, desc="... TODO ...";
    I, AccessPermission:Invalid, desc="... TODO ...";
    I_evict, AccessPermission:Busy, desc="... TODO ...";
    I_load, AccessPermission:Busy, desc="... TODO ...";
    I_store, AccessPermission:Busy, desc="... TODO ...";
    I_store_GetF_Ack_AD, AccessPermission:Read_Only, desc="... TODO ...";
    I_store_GetM_Ack_AD, AccessPermission:Read_Only, desc="... TODO ...";
    M, AccessPermission:Read_Write, desc="... TODO ...";
    M_evict, AccessPermission:Read_Only, desc="... TODO ...";
    S, AccessPermission:Read_Only, desc="... TODO ...";
    S_evict, AccessPermission:Read_Only, desc="... TODO ...";
    S_store, AccessPermission:Read_Only, desc="... TODO ...";
    S_store_GetF_Ack_AD, AccessPermission:Read_Only, desc="... TODO ...";
    S_store_GetM_Ack_AD, AccessPermission:Read_Only, desc="... TODO ...";
  }
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheEvents
  enumeration(Event, desc="Cache events") {
    EloadEEvent, desc="E->E upon local load hit.";
    FloadFEvent, desc="F->F upon local load hit.";
    MloadMEvent, desc="M->M upon local load hit.";
    SloadSEvent, desc="S->S upon local load hit.";
    EstoreMEvent, desc="E->M upon local store hit.";
    MstoreMEvent, desc="M->M upon local store hit.";
    Stallmandatory_in, desc="Stall the mandatory_in port.";
    
    externalloadEfwdfrom_in, desc="Remote load hit ending in state E. Should pop fwdfrom_in.";
    externalloadFfwdfrom_in, desc="Remote load hit ending in state F. Should pop fwdfrom_in.";
    externalloadMfwdfrom_in, desc="Remote load hit ending in state M. Should pop fwdfrom_in.";
    externalloadSfwdfrom_in, desc="Remote load hit ending in state S. Should pop fwdfrom_in.";
    externalstoreMfwdfrom_in, desc="Remote store hit ending in state M. Should pop fwdfrom_in.";
    deallocfwdfrom_in, desc="Event indicating the cache line + tbe should be deallocated following a message received on fwdfrom_in.";
    Stallfwdfrom_in, desc="Stall the fwdfrom_in port.";
    
    externalloadEreqfrom_in, desc="Remote load hit ending in state E. Should pop reqfrom_in.";
    externalloadFreqfrom_in, desc="Remote load hit ending in state F. Should pop reqfrom_in.";
    externalloadMreqfrom_in, desc="Remote load hit ending in state M. Should pop reqfrom_in.";
    externalloadSreqfrom_in, desc="Remote load hit ending in state S. Should pop reqfrom_in.";
    externalstoreMreqfrom_in, desc="Remote store hit ending in state M. Should pop reqfrom_in.";
    deallocreqfrom_in, desc="Event indicating the cache line + tbe should be deallocated following a message received on reqfrom_in.";
    Stallreqfrom_in, desc="Stall the reqfrom_in port.";
    
    externalloadErespfrom_in, desc="Remote load hit ending in state E. Should pop respfrom_in.";
    externalloadFrespfrom_in, desc="Remote load hit ending in state F. Should pop respfrom_in.";
    externalloadMrespfrom_in, desc="Remote load hit ending in state M. Should pop respfrom_in.";
    externalloadSrespfrom_in, desc="Remote load hit ending in state S. Should pop respfrom_in.";
    externalstoreMrespfrom_in, desc="Remote store hit ending in state M. Should pop respfrom_in.";
    deallocrespfrom_in, desc="Event indicating the cache line + tbe should be deallocated following a message received on respfrom_in.";
    Stallrespfrom_in, desc="Stall the respfrom_in port.";
    
    allocI_Ifetch, desc="Event indicating cache entry alloc before moving to I_load.";
    allocI_load, desc="Event indicating cache entry alloc before moving to I_load.";
    allocI_store, desc="Event indicating cache entry alloc before moving to I_store.";
    allocTBE, desc="Allocate a new TBE.";
    
    deallocevict, desc="Deallocate cache block before completion ack for eviction request.";
    deallocTBE, desc="Deallocate a TBE.";
    
    Progress, desc="Progress, please!";
  }
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheStruct
  structure(Entry, desc="Stored variables of the Cache machine", interface="AbstractCacheEntry") {
    State CacheState, desc="Cache state";
  
    DataBlock cl, desc="... TODO ...";
  }
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheTBE
  structure(TBE, desc="TBE entries for L1Cache machine") {
    State TBEState,       desc="Transient State";
    int acksReceivedL1, default=0, desc="...TODO...";
    int acksExpectedL1, default=0, desc="...TODO...";
    DataBlock cl, desc="... TODO ...";
    bool dirty, desc="... TODO ...";
  }
  
  structure(TBETable, external="yes"){
    TBE lookup(Addr);
    void allocate(Addr);
    void deallocate(Addr);
    bool isPresent(Addr);
    bool areNSlotsAvailable(int, Tick);
  }
  
  TBETable TBEs, template="<L1Cache_TBE>", constructor="m_number_of_TBEs";
  
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheStaticFns
  Tick clockEdge();
  Tick cyclesToTicks(Cycles c);
  Cycles ticksToCycles(Tick t);
  void set_cache_entry(AbstractCacheEntry a);
  void unset_cache_entry();
  void set_tbe(TBE a);
  void unset_tbe();
  void wakeUpAllBuffers(Addr a);
  
  MachineID mapAddressToMachine(Addr addr, MachineType mtype);
  
  Entry getEntry(Addr LineAddress), return_by_pointer="yes" {
    return static_cast(Entry, "pointer", cache.lookup(LineAddress));
  }

  DataBlock getCacheBlock(TBE tbe, Entry cache_entry, Addr LineAddress) {
    if (is_valid(cache_entry)) {
        return cache_entry.cl;
    }
    else if (is_valid(tbe) && tbe.dirty) {
        return tbe.cl;
    } else {
        error("block not present");
    }
  }

  void setCacheBlock(TBE tbe, Entry cache_entry, Addr LineAddress, DataBlock cl) {
    if (is_valid(cache_entry)) {
        cache_entry.cl := cl;
    }
    else if (is_valid(tbe) && tbe.dirty) {
        tbe.cl := cl;
    } else {
        error("block not present");
    }
  }
  
  State getState(TBE tbe, Entry cache_entry, Addr LineAddress) {
    if (is_valid(tbe)) {
      return tbe.TBEState;
    } else if (is_valid(cache_entry)) {
      return cache_entry.CacheState;
    } else {
      return State:I;
    }
  }
  
  void setState(TBE tbe, Entry cache_entry, Addr LineAddress, State state) {
    DPRINTF(RubySlicc, "%s -> %s (addr: %#x)\n", getState(tbe, cache_entry, LineAddress), state, LineAddress);
    //if (state != getState(tbe, cache_entry, LineAddress)) {
    //  wakeUpAllBuffers(LineAddress);
    //}
    if (is_valid(tbe)) {
      tbe.TBEState := state;
    }
    if (is_valid(cache_entry)) {
      cache_entry.CacheState := state;
    }
  }
  
  AccessPermission getAccessPermission(Addr LineAddress) {
    TBE tbe := TBEs[LineAddress];
    if (is_valid(tbe)) {
      return L1Cache_State_to_permission(tbe.TBEState);
    }
    Entry cache_entry := getEntry(LineAddress);
    if (is_valid(cache_entry)) {
      return L1Cache_State_to_permission(cache_entry.CacheState);
    } else {
      return AccessPermission:NotPresent;
    }
  }
  
  void setAccessPermission(Entry cache_entry, Addr LineAddress, State state) {
    if (is_valid(cache_entry)) {
      cache_entry.changePermission(L1Cache_State_to_permission(state));
    }
  }

  void functionalRead(Addr addr, Packet *pkt) {
    TBE tbe := TBEs[addr];
    Entry cache_entry := getEntry(addr);
      if (is_valid(cache_entry)) {
        testAndRead(addr, cache_entry.cl, pkt);
    } else if(is_valid(tbe) && tbe.dirty) {
      testAndRead(addr, tbe.cl, pkt);
    } else {
      error("Block not present!");
    }
  }
  
  int functionalWrite(Addr addr, Packet *pkt) {
    int num_functional_writes := 0;
    Entry cache_entry := getEntry(addr);
    if (is_valid(cache_entry)) {
      num_functional_writes := num_functional_writes +
        testAndWrite(addr, cache_entry.cl, pkt);
      return num_functional_writes;
    }

    TBE tbe := TBEs[addr];
    if(is_valid(tbe) && tbe.dirty) {
      num_functional_writes := num_functional_writes +
      testAndWrite(addr, tbe.cl, pkt);
    }
    return num_functional_writes;
  }
  
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheOutPorts
  out_port(fwdto_out, CoherenceMessage, fwdTo);
  out_port(reqto_out, CoherenceMessage, reqTo);
  out_port(respto_out, CoherenceMessage, respTo);
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheInPorts
  in_port(fwdfrom_in, CoherenceMessage, fwdFrom, rank=0) {
    if (fwdfrom_in.isReady(clockEdge())) {
      peek (fwdfrom_in, CoherenceMessage, block_on="LineAddress") {
        Addr LineAddress := in_msg.LineAddress;
        TBE tbe := TBEs[LineAddress];
        State st := getState(tbe, getEntry(LineAddress), LineAddress);
        DPRINTF(RubySlicc, "fwdfrom_in: %s %s %s (addr: %#x)\n", in_msg.Type, in_msg.Sender, st, LineAddress);
        if (st == State:E) {
          if (in_msg.Type == CoherenceMessageType:Fwd_GetML1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetM_Ack_DL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            trigger(Event:deallocfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Fwd_GetSL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_AckL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:E_evict) {      
          if (in_msg.Type == CoherenceMessageType:Fwd_GetML1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetM_Ack_DL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            tbe.dirty := false;
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Fwd_GetSL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_AckL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:F) {      
          if (in_msg.Type == CoherenceMessageType:Fwd_GetML1) {
            enqueue(fwdto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_Ack_ADL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
              out_msg.acksExpectedL1 := in_msg.acksExpectedL1;
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            trigger(Event:deallocfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Fwd_GetSL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_AckL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:F_evict) {      
          if (in_msg.Type == CoherenceMessageType:Fwd_GetML1) {
            enqueue(fwdto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_Ack_ADL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
              out_msg.acksExpectedL1 := in_msg.acksExpectedL1;
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            tbe.dirty := false;
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Fwd_GetSL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_AckL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:F_store) {      
          if (in_msg.Type == CoherenceMessageType:Fwd_GetML1) {
            enqueue(fwdto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_Ack_ADL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
              out_msg.acksExpectedL1 := in_msg.acksExpectedL1;
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_store);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Fwd_GetSL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_AckL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:UnblockL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S_store);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:GetF_Ack_ADL1) {
            tbe.acksExpectedL1 := in_msg.acksExpectedL1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              enqueue(respto_out, CoherenceMessage, responseLatency) {
                out_msg.LineAddress := LineAddress;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
                out_msg.Type := CoherenceMessageType:UnblockL1;
                out_msg.Sender := machineID;
              }
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:F_store_GetF_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              fwdfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }  
          } else if (in_msg.Type == CoherenceMessageType:GetM_Ack_ADL1) {
            tbe.acksExpectedL1 := in_msg.acksExpectedL1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              enqueue(respto_out, CoherenceMessage, responseLatency) {
                out_msg.LineAddress := LineAddress;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
                out_msg.Type := CoherenceMessageType:UnblockL1;
                out_msg.Sender := machineID;
              }
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:F_store_GetM_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              fwdfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I) {      
          if (in_msg.Type == CoherenceMessageType:InvL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:Inv_AckL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:deallocfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_evict) {      
          if (in_msg.Type == CoherenceMessageType:InvL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:Inv_AckL1;
              out_msg.Sender := machineID;
            }
            tbe.dirty := false;
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_load) {      
          if (in_msg.Type == CoherenceMessageType:InvL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:Inv_AckL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_load);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_store) {      
          if (in_msg.Type == CoherenceMessageType:GetF_Ack_ADL1) {
            setCacheBlock(tbe, getEntry(LineAddress), LineAddress, in_msg.cl);
            tbe.acksExpectedL1 := in_msg.acksExpectedL1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:I_store_GetF_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              fwdfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }  
          } else if (in_msg.Type == CoherenceMessageType:GetM_Ack_ADL1) {
            setCacheBlock(tbe, getEntry(LineAddress), LineAddress, in_msg.cl);
            tbe.acksExpectedL1 := in_msg.acksExpectedL1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:I_store_GetM_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              fwdfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }  
          } else if (in_msg.Type == CoherenceMessageType:InvL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:Inv_AckL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_store);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:M) {      
          if (in_msg.Type == CoherenceMessageType:Fwd_GetML1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetM_Ack_DL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            trigger(Event:deallocfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Fwd_GetSL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_AckL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:WBL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:M_evict) {      
          if (in_msg.Type == CoherenceMessageType:Fwd_GetML1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetM_Ack_DL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            tbe.dirty := false;
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Fwd_GetSL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:GetF_AckL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:WBL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:S) {      
          if (in_msg.Type == CoherenceMessageType:InvL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:Inv_AckL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            trigger(Event:deallocfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:S_evict) {      
          if (in_msg.Type == CoherenceMessageType:InvL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:Inv_AckL1;
              out_msg.Sender := machineID;
            }
            tbe.dirty := false;
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_evict);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:S_store) {      
          if (in_msg.Type == CoherenceMessageType:GetF_Ack_ADL1) {
            tbe.acksExpectedL1 := in_msg.acksExpectedL1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:S_store_GetF_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              fwdfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }  
          } else if (in_msg.Type == CoherenceMessageType:GetM_Ack_ADL1) {
            tbe.acksExpectedL1 := in_msg.acksExpectedL1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:S_store_GetM_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              fwdfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }  
          } else if (in_msg.Type == CoherenceMessageType:InvL1) {
            enqueue(respto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(in_msg.Sender);
              out_msg.Type := CoherenceMessageType:Inv_AckL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_store);
            DPRINTF(RubySlicc, "Popping %s %s on fwdfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            fwdfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else {
          trigger(Event:Stallfwdfrom_in, LineAddress, getEntry(LineAddress), tbe);
        }
      }
    }
  }
  
  in_port(respfrom_in, CoherenceMessage, respFrom, rank=1) {
    if (respfrom_in.isReady(clockEdge())) {
      peek (respfrom_in, CoherenceMessage, block_on="LineAddress") {
        Addr LineAddress := in_msg.LineAddress;
        TBE tbe := TBEs[LineAddress];
        State st := getState(tbe, getEntry(LineAddress), LineAddress);
        DPRINTF(RubySlicc, "respfrom_in: %s %s %s (addr: %#x)\n", in_msg.Type, in_msg.Sender, st, LineAddress);
        if (st == State:E_evict) {
          if (in_msg.Type == CoherenceMessageType:PutE_AckL1) {
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            tbe.dirty := false;
            respfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:deallocrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:F_evict) {      
          if (in_msg.Type == CoherenceMessageType:PutF_AckL1) {
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            tbe.dirty := false;
            respfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:deallocrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:F_store) {      
          if (in_msg.Type == CoherenceMessageType:GetM_Ack_DL1) {
            setState(tbe, getEntry(LineAddress), LineAddress, State:M);
            trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            setState(tbe, getEntry(LineAddress), LineAddress, State:F_store);
            DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            respfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:F_store_GetF_Ack_AD) {      
          if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              enqueue(respto_out, CoherenceMessage, responseLatency) {
                out_msg.LineAddress := LineAddress;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
                out_msg.Type := CoherenceMessageType:UnblockL1;
                out_msg.Sender := machineID;
              }
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:F_store_GetF_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              respfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:F_store_GetM_Ack_AD) {      
          if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              enqueue(respto_out, CoherenceMessage, responseLatency) {
                out_msg.LineAddress := LineAddress;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
                out_msg.Type := CoherenceMessageType:UnblockL1;
                out_msg.Sender := machineID;
              }
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:F_store_GetM_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              respfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_evict) {      
          if (in_msg.Type == CoherenceMessageType:PutI_AckL1) {
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            tbe.dirty := false;
            respfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:deallocrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_load) {      
          if (in_msg.Type == CoherenceMessageType:GetF_AckL1) {
            setCacheBlock(tbe, getEntry(LineAddress), LineAddress, in_msg.cl);
            setState(tbe, getEntry(LineAddress), LineAddress, State:F);
            trigger(Event:externalloadFrespfrom_in, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:GetS_AckL1) {
            setCacheBlock(tbe, getEntry(LineAddress), LineAddress, in_msg.cl);
            setState(tbe, getEntry(LineAddress), LineAddress, State:S);
            trigger(Event:externalloadSrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else if (in_msg.Type == CoherenceMessageType:GetM_Ack_DL1) {
            setCacheBlock(tbe, getEntry(LineAddress), LineAddress, in_msg.cl);
            setState(tbe, getEntry(LineAddress), LineAddress, State:E);
            trigger(Event:externalloadErespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_store) {      
          if (in_msg.Type == CoherenceMessageType:GetM_Ack_DL1) {
            setCacheBlock(tbe, getEntry(LineAddress), LineAddress, in_msg.cl);
            setState(tbe, getEntry(LineAddress), LineAddress, State:M);
            trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_store);
            DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            respfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_store_GetF_Ack_AD) {      
          if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:I_store_GetF_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              respfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:I_store_GetM_Ack_AD) {      
          if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:I_store_GetM_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              respfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:M_evict) {      
          if (in_msg.Type == CoherenceMessageType:PutM_AckL1) {
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            tbe.dirty := false;
            respfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:deallocrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:S_evict) {      
          if (in_msg.Type == CoherenceMessageType:PutS_AckL1) {
            setState(tbe, getEntry(LineAddress), LineAddress, State:I);
            tbe.dirty := false;
            respfrom_in.dequeue(clockEdge());
            trigger(Event:deallocTBE, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:deallocrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:S_store) {      
          if (in_msg.Type == CoherenceMessageType:GetM_Ack_DL1) {
            setState(tbe, getEntry(LineAddress), LineAddress, State:M);
            trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);  
          } else if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            setState(tbe, getEntry(LineAddress), LineAddress, State:S_store);
            DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
            respfrom_in.dequeue(clockEdge());
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:S_store_GetF_Ack_AD) {      
          if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:S_store_GetF_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              respfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else if (st == State:S_store_GetM_Ack_AD) {      
          if (in_msg.Type == CoherenceMessageType:Inv_AckL1) {
            tbe.acksReceivedL1 := tbe.acksReceivedL1+1;
            if (tbe.acksExpectedL1 == tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:M);
              trigger(Event:externalstoreMrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
            }
            else if (tbe.acksExpectedL1 != tbe.acksReceivedL1) {
              setState(tbe, getEntry(LineAddress), LineAddress, State:S_store_GetM_Ack_AD);
              DPRINTF(RubySlicc, "Popping %s %s on respfrom_in (addr: %#x)\n", in_msg.Type, in_msg.Sender, LineAddress);
              respfrom_in.dequeue(clockEdge());
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
          }
        } else {
          trigger(Event:Stallrespfrom_in, LineAddress, getEntry(LineAddress), tbe);
        }
      }
    }
  }
  
  in_port(reqfrom_in, CoherenceMessage, reqFrom, rank=3) {
    if (reqfrom_in.isReady(clockEdge())) {
      peek (reqfrom_in, CoherenceMessage, block_on="LineAddress") {
        Addr LineAddress := in_msg.LineAddress;
        TBE tbe := TBEs[LineAddress];
        State st := getState(tbe, getEntry(LineAddress), LineAddress);
        DPRINTF(RubySlicc, "reqfrom_in: %s %s %s (addr: %#x)\n", in_msg.Type, in_msg.Sender, st, LineAddress);
        error("Invalid transition");
      }
    }
  }
  
  in_port(mandatory_in, RubyRequest, mandatoryQueue, rank=2) {
    if (mandatory_in.isReady(clockEdge())) {
      peek(mandatory_in, RubyRequest, block_on="LineAddress") {
        Addr LineAddress := in_msg.LineAddress;
        Entry entry := getEntry(LineAddress);
        DPRINTF(RubySlicc, "mandatory_in: %s %s (addr: %#x)\n", in_msg.Type, getState(TBEs[LineAddress], entry, LineAddress), LineAddress);
        if (is_invalid(entry) &&
            cache.cacheAvail(LineAddress) == false ) {
          Addr victim := cache.cacheProbe(in_msg.LineAddress);
          DPRINTF(RubySlicc, "Evicting %#x (%s) for %#x\n", victim, getState(TBEs[victim], getEntry(victim), victim), LineAddress);
          Addr LineAddress := victim;
          TBE tbe := TBEs[LineAddress];
          Entry entry := getEntry(LineAddress);
          State st := getState(tbe, entry, LineAddress);
          if (st == State:E) {
            if (is_invalid(tbe)) {
              if (TBEs.areNSlotsAvailable(1, clockEdge())) {
                trigger(Event:allocTBE, LineAddress, getEntry(LineAddress), tbe);
              } else {
                DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
                mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
                trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
              }
            }
            enqueue(reqto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:PutEL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:E_evict);
            // If necessary, forward the eviction to the CPU so that it can squash speculation
            if (send_evictions) {
              sequencer.evictionCallback(LineAddress);
            }
            trigger(Event:deallocevict, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else if (st == State:F) {
            if (is_invalid(tbe)) {
              if (TBEs.areNSlotsAvailable(1, clockEdge())) {
                trigger(Event:allocTBE, LineAddress, getEntry(LineAddress), tbe);
              } else {
                DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
                mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
                trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
              }
            }
            enqueue(reqto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:PutFL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:F_evict);
            // If necessary, forward the eviction to the CPU so that it can squash speculation
            if (send_evictions) {
              sequencer.evictionCallback(LineAddress);
            }
            trigger(Event:deallocevict, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else if (st == State:I) {
            if (is_invalid(tbe)) {
              if (TBEs.areNSlotsAvailable(1, clockEdge())) {
                trigger(Event:allocTBE, LineAddress, getEntry(LineAddress), tbe);
              } else {
                DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
                mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
                trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
              }
            }
            enqueue(reqto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Control;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:PutIL1;
              out_msg.Sender := machineID;
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:I_evict);
            // If necessary, forward the eviction to the CPU so that it can squash speculation
            if (send_evictions) {
              sequencer.evictionCallback(LineAddress);
            }
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else if (st == State:M) {
            if (is_invalid(tbe)) {
              if (TBEs.areNSlotsAvailable(1, clockEdge())) {
                trigger(Event:allocTBE, LineAddress, getEntry(LineAddress), tbe);
              } else {
                DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
                mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
                trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
              }
            }
            enqueue(reqto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:PutML1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:M_evict);
            // If necessary, forward the eviction to the CPU so that it can squash speculation
            if (send_evictions) {
              sequencer.evictionCallback(LineAddress);
            }
            trigger(Event:deallocevict, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else if (st == State:S) {
            if (is_invalid(tbe)) {
              if (TBEs.areNSlotsAvailable(1, clockEdge())) {
                trigger(Event:allocTBE, LineAddress, getEntry(LineAddress), tbe);
              } else {
                DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
                mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
                trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
              }
            }
            enqueue(reqto_out, CoherenceMessage, responseLatency) {
              out_msg.LineAddress := LineAddress;
              out_msg.MessageSize := MessageSizeType:Data;
              out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
              out_msg.Type := CoherenceMessageType:PutSL1;
              out_msg.Sender := machineID;
              out_msg.cl := getCacheBlock(tbe, getEntry(LineAddress), LineAddress);
            }
            setState(tbe, getEntry(LineAddress), LineAddress, State:S_evict);
            // If necessary, forward the eviction to the CPU so that it can squash speculation
            if (send_evictions) {
              sequencer.evictionCallback(LineAddress);
            }
            trigger(Event:deallocevict, LineAddress, getEntry(LineAddress), tbe);
            //trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          } else {
            DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
            mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
            trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
          }
        } else {
          TBE tbe := TBEs[LineAddress];
          Entry entry := getEntry(LineAddress);
          State st := getState(tbe, entry, LineAddress);
          if (in_msg.Type == RubyRequestType:IFETCH) {
            if (st == State:E) {
              trigger(Event:EloadEEvent, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:F) {
              trigger(Event:FloadFEvent, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:I) {
              trigger(Event:allocI_Ifetch, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:M) {
              trigger(Event:MloadMEvent, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:S) {
              trigger(Event:SloadSEvent, LineAddress, getEntry(LineAddress), tbe);
            } else {
              DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
              mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else if (in_msg.Type == RubyRequestType:LD) {
            if (st == State:E) {
              
              trigger(Event:EloadEEvent, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:F) {
              
              trigger(Event:FloadFEvent, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:I) {
              trigger(Event:allocI_load, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:M) {
              
              trigger(Event:MloadMEvent, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:S) {
              
              trigger(Event:SloadSEvent, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else {
              DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
              mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else if (in_msg.Type == RubyRequestType:ST) {
            if (st == State:E) {
              
              trigger(Event:EstoreMEvent, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:F) {
              if (is_invalid(tbe)) {
                if (TBEs.areNSlotsAvailable(1, clockEdge())) {
                  trigger(Event:allocTBE, LineAddress, getEntry(LineAddress), tbe);
                } else {
                  DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
                  mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
                  trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
                }
              }
              enqueue(reqto_out, CoherenceMessage, responseLatency) {
                out_msg.LineAddress := LineAddress;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
                out_msg.Type := CoherenceMessageType:GetML1;
                out_msg.Sender := machineID;
              }
              tbe.acksReceivedL1 := 0;
              setState(tbe, getEntry(LineAddress), LineAddress, State:F_store);
              mandatory_in.dequeue(clockEdge());
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:I) {
              trigger(Event:allocI_store, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:M) {
              
              trigger(Event:MstoreMEvent, LineAddress, getEntry(LineAddress), tbe);
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else if (st == State:S) {
              if (is_invalid(tbe)) {
                if (TBEs.areNSlotsAvailable(1, clockEdge())) {
                  trigger(Event:allocTBE, LineAddress, getEntry(LineAddress), tbe);
                } else {
                  DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
                  mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
                  trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
                }
              }
              enqueue(reqto_out, CoherenceMessage, responseLatency) {
                out_msg.LineAddress := LineAddress;
                out_msg.MessageSize := MessageSizeType:Control;
                out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
                out_msg.Type := CoherenceMessageType:GetML1;
                out_msg.Sender := machineID;
              }
              tbe.acksReceivedL1 := 0;
              setState(tbe, getEntry(LineAddress), LineAddress, State:S_store);
              mandatory_in.dequeue(clockEdge());
              
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            } else {
              DPRINTF(RubySlicc, "recycling %s on mandatory_in (addr: %#x)\n", st, LineAddress);
              mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
              trigger(Event:Progress, LineAddress, getEntry(LineAddress), tbe);
            }
          } else {
            error("Unexpected message type from processor");
          }
        }
      }
    }
  }
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheActions
  action(allocEntry, "a", desc="Allocate an entry") {
     assert(is_invalid(cache_entry));
     assert(cache.cacheAvail(address));
     set_cache_entry(cache.allocate(address, new Entry));
  }
  action(deallocEntry, "d", desc="Deallocate an entry") {
      assert(is_valid(cache_entry));
      cache.deallocate(address);
      unset_cache_entry();
  }
  action(a_allocTBE, "aTBE", desc="Allocate TBE entry.") {
    TBEs.allocate(address);
    set_tbe(TBEs[address]);
  }
  action(a_deallocTBE, "dTBE", desc="Deallocate TBE entry.") {
    if (is_valid(tbe)) {
      TBEs.deallocate(address);
      unset_tbe();
    }
  }
  action(a_copyEntryToTBE, "cpTBE", desc="Copy Entry to TBE.") {
    if (is_valid(cache_entry)) {
      if (is_valid(tbe)) {
          tbe.cl := cache_entry.cl;
          tbe.dirty := true;
      }
    }
  }
  action(local_loadHit, "lLh", desc="Callback local load hit.") {
    // Signal to gem5 that this load/read access was a hit locally
    assert(is_valid(cache_entry));
    cache.setMRU(cache_entry);
    sequencer.readCallback(address, cache_entry.cl, false);
  }
  
  action(local_storeHit, "lSh", desc="Callback local store hit.") {
    // Signal to gem5 that this store access was a hit locally
    assert(is_valid(cache_entry));
    cache.setMRU(cache_entry);
    sequencer.writeCallback(address, cache_entry.cl, false);
  }
  
  action(remote_loadHit, "rLh", desc="Callback remote load hit.") {
    // Signal to gem5 that this load/read access was a hit remotely
    // (i.e. was satisfied through the coherence interface)
    assert(is_valid(cache_entry));
    cache.setMRU(cache_entry);
    sequencer.readCallback(address, cache_entry.cl, true);
  }
  
  action(remote_storeHit, "rSh", desc="Callback remote store hit.") {
    // Signal to gem5 that this load/read access was a hit remotely
    // (i.e. was satisfied through the coherence interface)
    assert(is_valid(cache_entry));
    cache.setMRU(cache_entry);
    sequencer.writeCallback(address, cache_entry.cl, true);
  }
  
  action(popmandatory_in, "pmandatory_in0", desc="Pop the mandatory_in queue.") {
      // Sometimes we need to be able to pop a queue/in_port from within a transition
      // rather than from within the in_port itself. Thus, we need an action for this,
      // since transitions cannot execute non-action functions.
      mandatory_in.dequeue(clockEdge());
  }
  
  action(recyclemandatory_in, "rmandatory_in0", desc="Recycle the mandatory_in port") {
    DPRINTF(RubySlicc, "Stalling mandatory_in (addr: %#x)\n", address);
    mandatory_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
    //stall_and_wait(mandatory_in, address);
  }
  
  action(popfwdfrom_in, "pfwdfrom_in0", desc="Pop the fwdfrom_in queue.") {
      // Sometimes we need to be able to pop a queue/in_port from within a transition
      // rather than from within the in_port itself. Thus, we need an action for this,
      // since transitions cannot execute non-action functions.
      fwdfrom_in.dequeue(clockEdge());
  }
  
  action(recyclefwdfrom_in, "rfwdfrom_in0", desc="Recycle the fwdfrom_in port") {
    DPRINTF(RubySlicc, "Stalling fwdfrom_in (addr: %#x)\n", address);
    fwdfrom_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
    //stall_and_wait(fwdfrom_in, address);
  }
  
  action(popreqfrom_in, "preqfrom_in0", desc="Pop the reqfrom_in queue.") {
      // Sometimes we need to be able to pop a queue/in_port from within a transition
      // rather than from within the in_port itself. Thus, we need an action for this,
      // since transitions cannot execute non-action functions.
      reqfrom_in.dequeue(clockEdge());
  }
  
  action(recyclereqfrom_in, "rreqfrom_in0", desc="Recycle the reqfrom_in port") {
    DPRINTF(RubySlicc, "Stalling reqfrom_in (addr: %#x)\n", address);
    reqfrom_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
    //stall_and_wait(reqfrom_in, address);
  }
  
  action(poprespfrom_in, "prespfrom_in0", desc="Pop the respfrom_in queue.") {
      // Sometimes we need to be able to pop a queue/in_port from within a transition
      // rather than from within the in_port itself. Thus, we need an action for this,
      // since transitions cannot execute non-action functions.
      respfrom_in.dequeue(clockEdge());
  }
  
  action(recyclerespfrom_in, "rrespfrom_in0", desc="Recycle the respfrom_in port") {
    DPRINTF(RubySlicc, "Stalling respfrom_in (addr: %#x)\n", address);
    respfrom_in.recycle(clockEdge(), cyclesToTicks(recycleLatency));
    //stall_and_wait(respfrom_in, address);
  }
  
  action(actionI_I_load, "II0", desc="TODO") {
    peek(mandatory_in, RubyRequest) {
      Addr LineAddress := in_msg.LineAddress;
      enqueue(reqto_out, CoherenceMessage, responseLatency) {
        out_msg.LineAddress := LineAddress;
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
        out_msg.Type := CoherenceMessageType:GetSL1;
        out_msg.Sender := machineID;
        out_msg.exclusiveL1 := true;
      }
    }
  }

  action(actionI_Ifetch_I_load, "lll0", desc="TODO") {
    peek(mandatory_in, RubyRequest) {
      Addr LineAddress := in_msg.LineAddress;
      enqueue(reqto_out, CoherenceMessage, responseLatency) {
        out_msg.LineAddress := LineAddress;
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
        out_msg.Type := CoherenceMessageType:GetSL1;
        out_msg.Sender := machineID;
        //out_msg.exclusiveL1 := true;
        out_msg.exclusiveL1 := false;
      }
    }
  }
  
  action(actionI_I_store, "II1", desc="TODO") {
    peek(mandatory_in, RubyRequest) {
      Addr LineAddress := in_msg.LineAddress;
      enqueue(reqto_out, CoherenceMessage, responseLatency) {
        out_msg.LineAddress := LineAddress;
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.Destination.add(createMachineID(MachineType:L0Cache, intToID(l2_id)));
        out_msg.Type := CoherenceMessageType:GetML1;
        out_msg.Sender := machineID;
      }
      tbe.acksReceivedL1 := 0;
    }
  }
  
  action(empty, "e", desc="Empty action") {
      // empty action; useful as SLICC requires valid transitions
      // to be non-empty, but the actions being invoked can still be empty
      // e.g. to simulate a z-stall
  }
  
  //Backend.SLICC.ModularSLICC.cache.GenCacheTransitions
  transition({I}, deallocfwdfrom_in) {
      deallocEntry;
      a_deallocTBE;
      popfwdfrom_in;
  }
  
  transition({I}, deallocreqfrom_in) {
      deallocEntry;
      a_deallocTBE;
      popreqfrom_in;
  }
  
  transition({I}, deallocrespfrom_in) {
      deallocEntry;
      a_deallocTBE;
      poprespfrom_in;
  }
  
  transition(I, allocI_load, I_load) {
    allocEntry;
    a_allocTBE;
    actionI_I_load;
    popmandatory_in;
  }
  
  transition(I, allocI_Ifetch, I_load) {
    allocEntry;
    a_allocTBE;
    actionI_Ifetch_I_load;
    popmandatory_in;
  }

  transition(I, allocI_store, I_store) {
    allocEntry;
    a_allocTBE;
    actionI_I_store;
    popmandatory_in;
  }
  
  transition(E, EloadEEvent, E) {
    local_loadHit;
    popmandatory_in;
  }
  
  transition(F, FloadFEvent, F) {
    local_loadHit;
    popmandatory_in;
  }
  
  transition(M, MloadMEvent, M) {
    local_loadHit;
    popmandatory_in;
  }
  
  transition(S, SloadSEvent, S) {
    local_loadHit;
    popmandatory_in;
  }
  
  transition(E, EstoreMEvent, M) {
    local_storeHit;
    popmandatory_in;
  }
  
  transition(M, MstoreMEvent, M) {
    local_storeHit;
    popmandatory_in;
  }
  
  transition(E, externalloadEfwdfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popfwdfrom_in;
  }
  
  transition(F, externalloadFfwdfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popfwdfrom_in;
  }
  
  transition(M, externalloadMfwdfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popfwdfrom_in;
  }
  
  transition(S, externalloadSfwdfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popfwdfrom_in;
  }
  
  transition(M, externalstoreMfwdfrom_in) {
    remote_storeHit;
    a_deallocTBE;
    popfwdfrom_in;
  }
  
  transition(E, externalloadEreqfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popreqfrom_in;
  }
  
  transition(F, externalloadFreqfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popreqfrom_in;
  }
  
  transition(M, externalloadMreqfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popreqfrom_in;
  }
  
  transition(S, externalloadSreqfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    popreqfrom_in;
  }
  
  transition(M, externalstoreMreqfrom_in) {
    remote_storeHit;
    a_deallocTBE;
    popreqfrom_in;
  }
  
  transition(E, externalloadErespfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    poprespfrom_in;
  }
  
  transition(F, externalloadFrespfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    poprespfrom_in;
  }
  
  transition(M, externalloadMrespfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    poprespfrom_in;
  }
  
  transition(S, externalloadSrespfrom_in) {
    remote_loadHit;
    a_deallocTBE;
    poprespfrom_in;
  }
  
  transition(M, externalstoreMrespfrom_in) {
    remote_storeHit;
    a_deallocTBE;
    poprespfrom_in;
  }
  
  transition({S_evict, E_evict, F_evict, M_evict}, deallocevict) {
    a_copyEntryToTBE;
    deallocEntry;
  }
  
  transition({E, E_evict, F, F_evict, F_store, F_store_GetF_Ack_AD, F_store_GetM_Ack_AD, I, I_evict, I_load, I_store, I_store_GetF_Ack_AD, I_store_GetM_Ack_AD, M, M_evict, S, S_evict, S_store, S_store_GetF_Ack_AD, S_store_GetM_Ack_AD}, Stallmandatory_in) {
      recyclemandatory_in;
  }
  
  transition({E, E_evict, F, F_evict, F_store, F_store_GetF_Ack_AD, F_store_GetM_Ack_AD, I, I_evict, I_load, I_store, I_store_GetF_Ack_AD, I_store_GetM_Ack_AD, M, M_evict, S, S_evict, S_store, S_store_GetF_Ack_AD, S_store_GetM_Ack_AD}, Stallfwdfrom_in) {
      recyclefwdfrom_in;
  }
  
  transition({E, E_evict, F, F_evict, F_store, F_store_GetF_Ack_AD, F_store_GetM_Ack_AD, I, I_evict, I_load, I_store, I_store_GetF_Ack_AD, I_store_GetM_Ack_AD, M, M_evict, S, S_evict, S_store, S_store_GetF_Ack_AD, S_store_GetM_Ack_AD}, Stallreqfrom_in) {
      recyclereqfrom_in;
  }
  
  transition({E, E_evict, F, F_evict, F_store, F_store_GetF_Ack_AD, F_store_GetM_Ack_AD, I, I_evict, I_load, I_store, I_store_GetF_Ack_AD, I_store_GetM_Ack_AD, M, M_evict, S, S_evict, S_store, S_store_GetF_Ack_AD, S_store_GetM_Ack_AD}, Stallrespfrom_in) {
      recyclerespfrom_in;
  }
  
  transition({E, E_evict, F, F_evict, F_store, F_store_GetF_Ack_AD, F_store_GetM_Ack_AD, I, I_evict, I_load, I_store, I_store_GetF_Ack_AD, I_store_GetM_Ack_AD, M, M_evict, S, S_evict, S_store, S_store_GetF_Ack_AD, S_store_GetM_Ack_AD}, allocTBE) {
    a_allocTBE;
  }
  
  transition({E, E_evict, F, F_evict, F_store, F_store_GetF_Ack_AD, F_store_GetM_Ack_AD, I, I_evict, I_load, I_store, I_store_GetF_Ack_AD, I_store_GetM_Ack_AD, M, M_evict, S, S_evict, S_store, S_store_GetF_Ack_AD, S_store_GetM_Ack_AD}, deallocTBE) {
    a_deallocTBE;
  }
  
  transition({E, E_evict, F, F_evict, F_store, F_store_GetF_Ack_AD, F_store_GetM_Ack_AD, I, I_evict, I_load, I_store, I_store_GetF_Ack_AD, I_store_GetM_Ack_AD, M, M_evict, S, S_evict, S_store, S_store_GetF_Ack_AD, S_store_GetM_Ack_AD}, Progress) {
      empty;
  }
}
// EOF<cache>
